use crate::dobot::dobot_trait::protocol::protocol_error::ProtocolError;

/// Represents the various alarm codes from the Dobot Magician.
#[derive(Debug, PartialEq, Clone, Copy)]
#[repr(u16)]
pub enum Alarm {
    // Common alarms
    CommonResetting = 0x00,
    CommonUndefinedInstruction = 0x01,
    CommonFileSystem = 0x02,
    CommonMcuFpgaComm = 0x03,
    CommonAngleSensor = 0x04,

    // Plan alarms
    PlanInvSingularity = 0x10,
    PlanInvCalc = 0x11,
    PlanInvLimit = 0x12,
    PlanPushDataRepeat = 0x13,
    PlanArcInputParam = 0x14,
    PlanJumpParam = 0x15,
    PlanLineHand = 0x16,
    PlanLineOutSpace = 0x17,
    PlanArcOutSpace = 0x18,
    PlanMotionType = 0x19,
    PlanSpeedInputParam = 0x1A,
    PlanCpCalc = 0x1B,

    // Move alarms
    MoveInvSingularity = 0x20,
    MoveInvCalc = 0x21,
    MoveInvLimit = 0x22,

    // Overspeed alarms
    OverspeedAxis1 = 0x30,
    OverspeedAxis2 = 0x31,
    OverspeedAxis3 = 0x32,
    OverspeedAxis4 = 0x33,

    // Limit alarms
    LimitAxis1Pos = 0x40,
    LimitAxis1Neg = 0x41,
    LimitAxis2Pos = 0x42,
    LimitAxis2Neg = 0x43,
    LimitAxis3Pos = 0x44,
    LimitAxis3Neg = 0x45,
    LimitAxis4Pos = 0x46,
    LimitAxis4Neg = 0x47,
    LimitAxis23Pos = 0x48,
    LimitAxis23Neg = 0x49,

    // Lose step alarms
    LoseStepAxis1 = 0x50,
    LoseStepAxis2 = 0x51,
    LoseStepAxis3 = 0x52,
    LoseStepAxis4 = 0x53,

    // Other alarms
    OtherAxis1Drv = 0x60,
    OtherAxis1Overflow = 0x61,
    OtherAxis1Follow = 0x62,
    OtherAxis2Drv = 0x63,
    OtherAxis2Overflow = 0x64,
    OtherAxis2Follow = 0x65,
    OtherAxis3Drv = 0x66,
    OtherAxis3Overflow = 0x67,
    OtherAxis3Follow = 0x68,
    OtherAxis4Drv = 0x69,
    OtherAxis4Overflow = 0x6A,
    OtherAxis4Follow = 0x6B,

    // Motor rear alarms
    MotorRearEncoder = 0x70,
    MotorRearTemperatureHigh = 0x71,
    MotorRearTemperatureLow = 0x72,
    MotorRearLockCurrent = 0x73,
    MotorRearBusvHigh = 0x74,
    MotorRearBusvLow = 0x75,
    MotorRearOverheat = 0x76,
    MotorRearRunaway = 0x77,
    MotorRearBatteryLow = 0x78,
    MotorRearPhaseShort = 0x79,
    MotorRearPhaseWrong = 0x7A,
    MotorRearLostSpeed = 0x7B,
    MotorRearNotStandardize = 0x7C,
    EncoderRearNotStandardize = 0x7D,
    MotorRearCanBroke = 0x7E,

    // Motor front alarms
    MotorFrontEncoder = 0x80,
    MotorFrontTemperatureHigh = 0x81,
    MotorFrontTemperatureLow = 0x82,
    MotorFrontLockCurrent = 0x83,
    MotorFrontBusvHigh = 0x84,
    MotorFrontBusvLow = 0x85,
    MotorFrontOverheat = 0x86,
    MotorFrontRunaway = 0x87,
    MotorFrontBatteryLow = 0x88,
    MotorFrontPhaseShort = 0x89,
    MotorFrontPhaseWrong = 0x8A,
    MotorFrontLostSpeed = 0x8B,
    MotorFrontNotStandardize = 0x8C,
    EncoderFrontNotStandardize = 0x8D,
    MotorFrontCanBroke = 0x8E,

    // Motor Z alarms
    MotorZEncoder = 0x90,
    MotorZTemperatureHigh = 0x91,
    MotorZTemperatureLow = 0x92,
    MotorZLockCurrent = 0x93,
    MotorZBusvHigh = 0x94,
    MotorZBusvLow = 0x95,
    MotorZOverheat = 0x96,
    MotorZRunaway = 0x97,
    MotorZBatteryLow = 0x98,
    MotorZPhaseShort = 0x99,
    MotorZPhaseWrong = 0x9A,
    MotorZLostSpeed = 0x9B,
    MotorZNotStandardize = 0x9C,
    EncoderZNotStandardize = 0x9D,
    MotorZCanBroke = 0x9E,

    // Motor R alarms
    MotorREncoder = 0xA0,
    MotorRThermperatureHigh = 0xA1,
    MotorRThermperatureLow = 0xA2,
    MotorRLockCurrent = 0xA3,
    MotorRBusvHigh = 0xA4,
    MotorRBusvLow = 0xA5,
    MotorROverheat = 0xA6,
    MotorRRunaway = 0xA7,
    MotorRBatteryLow = 0xA8,
    MotorRPhaseShort = 0xA9,
    MotorRPhaseWrong = 0xAA,
    MotorRLostSpeed = 0xAB,
    MotorRNotStandardize = 0xAC,
    EncoderRNotStandardize = 0xAD,
    MotorRCanBroke = 0xAE,

    // Motor ENDIO alarms
    MotorEndioIo = 0xB0,
    MotorEndioRs485Wrong = 0xB1,
    MotorEndioCanBroke = 0xB2,
}

impl Alarm {
    pub fn try_from_u16(value: u16) -> Result<Self, ProtocolError> {
        match value {
            0x00 => Ok(Alarm::CommonResetting),
            0x01 => Ok(Alarm::CommonUndefinedInstruction),
            0x02 => Ok(Alarm::CommonFileSystem),
            0x03 => Ok(Alarm::CommonMcuFpgaComm),
            0x04 => Ok(Alarm::CommonAngleSensor),
            0x10 => Ok(Alarm::PlanInvSingularity),
            0x11 => Ok(Alarm::PlanInvCalc),
            0x12 => Ok(Alarm::PlanInvLimit),
            0x13 => Ok(Alarm::PlanPushDataRepeat),
            0x14 => Ok(Alarm::PlanArcInputParam),
            0x15 => Ok(Alarm::PlanJumpParam),
            0x16 => Ok(Alarm::PlanLineHand),
            0x17 => Ok(Alarm::PlanLineOutSpace),
            0x18 => Ok(Alarm::PlanArcOutSpace),
            0x19 => Ok(Alarm::PlanMotionType),
            0x1A => Ok(Alarm::PlanSpeedInputParam),
            0x1B => Ok(Alarm::PlanCpCalc),
            0x20 => Ok(Alarm::MoveInvSingularity),
            0x21 => Ok(Alarm::MoveInvCalc),
            0x22 => Ok(Alarm::MoveInvLimit),
            0x30 => Ok(Alarm::OverspeedAxis1),
            0x31 => Ok(Alarm::OverspeedAxis2),
            0x32 => Ok(Alarm::OverspeedAxis3),
            0x33 => Ok(Alarm::OverspeedAxis4),
            0x40 => Ok(Alarm::LimitAxis1Pos),
            0x41 => Ok(Alarm::LimitAxis1Neg),
            0x42 => Ok(Alarm::LimitAxis2Pos),
            0x43 => Ok(Alarm::LimitAxis2Neg),
            0x44 => Ok(Alarm::LimitAxis3Pos),
            0x45 => Ok(Alarm::LimitAxis3Neg),
            0x46 => Ok(Alarm::LimitAxis4Pos),
            0x47 => Ok(Alarm::LimitAxis4Neg),
            0x48 => Ok(Alarm::LimitAxis23Pos),
            0x49 => Ok(Alarm::LimitAxis23Neg),
            0x50 => Ok(Alarm::LoseStepAxis1),
            0x51 => Ok(Alarm::LoseStepAxis2),
            0x52 => Ok(Alarm::LoseStepAxis3),
            0x53 => Ok(Alarm::LoseStepAxis4),
            0x60 => Ok(Alarm::OtherAxis1Drv),
            0x61 => Ok(Alarm::OtherAxis1Overflow),
            0x62 => Ok(Alarm::OtherAxis1Follow),
            0x63 => Ok(Alarm::OtherAxis2Drv),
            0x64 => Ok(Alarm::OtherAxis2Overflow),
            0x65 => Ok(Alarm::OtherAxis2Follow),
            0x66 => Ok(Alarm::OtherAxis3Drv),
            0x67 => Ok(Alarm::OtherAxis3Overflow),
            0x68 => Ok(Alarm::OtherAxis3Follow),
            0x69 => Ok(Alarm::OtherAxis4Drv),
            0x6A => Ok(Alarm::OtherAxis4Overflow),
            0x6B => Ok(Alarm::OtherAxis4Follow),
            0x70 => Ok(Alarm::MotorRearEncoder),
            0x71 => Ok(Alarm::MotorRearTemperatureHigh),
            0x72 => Ok(Alarm::MotorRearTemperatureLow),
            0x73 => Ok(Alarm::MotorRearLockCurrent),
            0x74 => Ok(Alarm::MotorRearBusvHigh),
            0x75 => Ok(Alarm::MotorRearBusvLow),
            0x76 => Ok(Alarm::MotorRearOverheat),
            0x77 => Ok(Alarm::MotorRearRunaway),
            0x78 => Ok(Alarm::MotorRearBatteryLow),
            0x79 => Ok(Alarm::MotorRearPhaseShort),
            0x7A => Ok(Alarm::MotorRearPhaseWrong),
            0x7B => Ok(Alarm::MotorRearLostSpeed),
            0x7C => Ok(Alarm::MotorRearNotStandardize),
            0x7D => Ok(Alarm::EncoderRearNotStandardize),
            0x7E => Ok(Alarm::MotorRearCanBroke),
            0x80 => Ok(Alarm::MotorFrontEncoder),
            0x81 => Ok(Alarm::MotorFrontTemperatureHigh),
            0x82 => Ok(Alarm::MotorFrontTemperatureLow),
            0x83 => Ok(Alarm::MotorFrontLockCurrent),
            0x84 => Ok(Alarm::MotorFrontBusvHigh),
            0x85 => Ok(Alarm::MotorFrontBusvLow),
            0x86 => Ok(Alarm::MotorFrontOverheat),
            0x87 => Ok(Alarm::MotorFrontRunaway),
            0x88 => Ok(Alarm::MotorFrontBatteryLow),
            0x89 => Ok(Alarm::MotorFrontPhaseShort),
            0x8A => Ok(Alarm::MotorFrontPhaseWrong),
            0x8B => Ok(Alarm::MotorFrontLostSpeed),
            0x8C => Ok(Alarm::MotorFrontNotStandardize),
            0x8D => Ok(Alarm::EncoderFrontNotStandardize),
            0x8E => Ok(Alarm::MotorFrontCanBroke),
            0x90 => Ok(Alarm::MotorZEncoder),
            0x91 => Ok(Alarm::MotorZTemperatureHigh),
            0x92 => Ok(Alarm::MotorZTemperatureLow),
            0x93 => Ok(Alarm::MotorZLockCurrent),
            0x94 => Ok(Alarm::MotorZBusvHigh),
            0x95 => Ok(Alarm::MotorZBusvLow),
            0x96 => Ok(Alarm::MotorZOverheat),
            0x97 => Ok(Alarm::MotorZRunaway),
            0x98 => Ok(Alarm::MotorZBatteryLow),
            0x99 => Ok(Alarm::MotorZPhaseShort),
            0x9A => Ok(Alarm::MotorZPhaseWrong),
            0x9B => Ok(Alarm::MotorZLostSpeed),
            0x9C => Ok(Alarm::MotorZNotStandardize),
            0x9D => Ok(Alarm::EncoderZNotStandardize),
            0x9E => Ok(Alarm::MotorZCanBroke),
            0xA0 => Ok(Alarm::MotorREncoder),
            0xA1 => Ok(Alarm::MotorRThermperatureHigh),
            0xA2 => Ok(Alarm::MotorRThermperatureLow),
            0xA3 => Ok(Alarm::MotorRLockCurrent),
            0xA4 => Ok(Alarm::MotorRBusvHigh),
            0xA5 => Ok(Alarm::MotorRBusvLow),
            0xA6 => Ok(Alarm::MotorROverheat),
            0xA7 => Ok(Alarm::MotorRRunaway),
            0xA8 => Ok(Alarm::MotorRBatteryLow),
            0xA9 => Ok(Alarm::MotorRPhaseShort),
            0xAA => Ok(Alarm::MotorRPhaseWrong),
            0xAB => Ok(Alarm::MotorRLostSpeed),
            0xAC => Ok(Alarm::MotorRNotStandardize),
            0xAD => Ok(Alarm::EncoderRNotStandardize),
            0xAE => Ok(Alarm::MotorRCanBroke),
            0xB0 => Ok(Alarm::MotorEndioIo),
            0xB1 => Ok(Alarm::MotorEndioRs485Wrong),
            0xB2 => Ok(Alarm::MotorEndioCanBroke),
            code => Err(ProtocolError::InvalidAlarmCode(code)),
        }
    }
}
